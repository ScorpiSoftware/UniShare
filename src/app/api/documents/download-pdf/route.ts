import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';

export async function POST(request: NextRequest) {
  try {
    const supabase = createClient();
    
    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { content, title, type } = await request.json();

    if (!content || !title || !type) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      );
    }

    // Generate PDF HTML content
    const pdfHtml = generatePdfHtml(content, title, type);

    // For now, return the HTML content that can be used with a client-side PDF generator
    // In a production environment, you might want to use a server-side PDF generation service
    return NextResponse.json({
      success: true,
      htmlContent: pdfHtml,
      filename: `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${type}.pdf`
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

function generatePdfHtml(content: any, title: string, type: string): string {
  const styles = `
    <style>
      @page {
        margin: 1in;
        size: A4;
      }
      body {
        font-family: 'Times New Roman', serif;
        line-height: 1.6;
        color: #333;
        font-size: 12pt;
      }
      .header {
        text-align: center;
        margin-bottom: 30px;
        border-bottom: 2px solid #333;
        padding-bottom: 20px;
      }
      .title {
        font-size: 24pt;
        font-weight: bold;
        margin-bottom: 10px;
      }
      .subtitle {
        font-size: 14pt;
        color: #666;
        font-style: italic;
      }
      .section {
        margin-bottom: 25px;
        page-break-inside: avoid;
      }
      .section-title {
        font-size: 16pt;
        font-weight: bold;
        margin-bottom: 15px;
        color: #2c3e50;
        border-bottom: 1px solid #bdc3c7;
        padding-bottom: 5px;
      }
      .subsection-title {
        font-size: 14pt;
        font-weight: bold;
        margin: 15px 0 10px 0;
        color: #34495e;
      }
      .content {
        margin-bottom: 15px;
        text-align: justify;
      }
      .list {
        margin: 10px 0;
        padding-left: 20px;
      }
      .list-item {
        margin-bottom: 8px;
      }
      .key-term {
        font-weight: bold;
        color: #2980b9;
      }
      .definition {
        margin-left: 15px;
        font-style: italic;
      }
      .question {
        font-weight: bold;
        margin-bottom: 5px;
      }
      .answer {
        margin-bottom: 15px;
        padding-left: 15px;
      }
      .quiz-question {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
      }
      .options {
        margin: 10px 0;
        padding-left: 20px;
      }
      .option {
        margin-bottom: 5px;
      }
      .footer {
        position: fixed;
        bottom: 0.5in;
        right: 0.5in;
        font-size: 10pt;
        color: #666;
      }
    </style>
  `;

  let bodyContent = '';

  if (type === 'notes') {
    bodyContent = generateNotesHtml(content);
  } else if (type === 'summary') {
    bodyContent = generateSummaryHtml(content);
  } else if (type === 'flashcards') {
    bodyContent = generateFlashcardsHtml(content);
  } else if (type === 'quiz') {
    bodyContent = generateQuizHtml(content);
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>${title}</title>
      ${styles}
    </head>
    <body>
      <div class="header">
        <div class="title">${title}</div>
        <div class="subtitle">Generated by UniShare AI Document Chat</div>
      </div>
      ${bodyContent}
      <div class="footer">
        Generated on ${new Date().toLocaleDateString()}
      </div>
    </body>
    </html>
  `;
}

function generateNotesHtml(notes: any): string {
  let html = '';

  if (notes.sections) {
    notes.sections.forEach((section: any) => {
      html += `<div class="section">`;
      html += `<div class="section-title">${section.heading}</div>`;
      html += `<div class="content">${section.content}</div>`;
      
      if (section.subsections) {
        section.subsections.forEach((subsection: any) => {
          html += `<div class="subsection-title">${subsection.subheading}</div>`;
          html += `<div class="list">`;
          subsection.points.forEach((point: string) => {
            html += `<div class="list-item">• ${point}</div>`;
          });
          html += `</div>`;
        });
      }
      html += `</div>`;
    });
  }

  if (notes.keyTerms && notes.keyTerms.length > 0) {
    html += `<div class="section">`;
    html += `<div class="section-title">Key Terms</div>`;
    notes.keyTerms.forEach((term: any) => {
      html += `<div class="key-term">${term.term}</div>`;
      html += `<div class="definition">${term.definition}</div>`;
    });
    html += `</div>`;
  }

  if (notes.summary) {
    html += `<div class="section">`;
    html += `<div class="section-title">Summary</div>`;
    html += `<div class="content">${notes.summary}</div>`;
    html += `</div>`;
  }

  return html;
}

function generateSummaryHtml(summary: any): string {
  let html = '';

  if (summary.overview) {
    html += `<div class="section">`;
    html += `<div class="section-title">Overview</div>`;
    html += `<div class="content">${summary.overview}</div>`;
    html += `</div>`;
  }

  if (summary.keyPoints) {
    html += `<div class="section">`;
    html += `<div class="section-title">Key Points</div>`;
    html += `<div class="list">`;
    summary.keyPoints.forEach((point: string) => {
      html += `<div class="list-item">• ${point}</div>`;
    });
    html += `</div></div>`;
  }

  if (summary.likelyTestTopics) {
    html += `<div class="section">`;
    html += `<div class="section-title">Likely Test Topics</div>`;
    html += `<div class="list">`;
    summary.likelyTestTopics.forEach((topic: string) => {
      html += `<div class="list-item">• ${topic}</div>`;
    });
    html += `</div></div>`;
  }

  if (summary.commonMistakes) {
    html += `<div class="section">`;
    html += `<div class="section-title">Common Mistakes</div>`;
    html += `<div class="list">`;
    summary.commonMistakes.forEach((mistake: string) => {
      html += `<div class="list-item">• ${mistake}</div>`;
    });
    html += `</div></div>`;
  }

  if (summary.studyTips) {
    html += `<div class="section">`;
    html += `<div class="section-title">Study Tips</div>`;
    html += `<div class="list">`;
    summary.studyTips.forEach((tip: string) => {
      html += `<div class="list-item">• ${tip}</div>`;
    });
    html += `</div></div>`;
  }

  return html;
}

function generateFlashcardsHtml(flashcards: any[]): string {
  let html = '';

  flashcards.forEach((card: any, index: number) => {
    html += `<div class="section">`;
    html += `<div class="section-title">Flashcard ${index + 1}</div>`;
    html += `<div class="question">Q: ${card.question}</div>`;
    html += `<div class="answer">A: ${card.answer}</div>`;
    html += `</div>`;
  });

  return html;
}

function generateQuizHtml(quiz: any): string {
  let html = '';

  if (quiz.questions) {
    quiz.questions.forEach((question: any, index: number) => {
      html += `<div class="quiz-question">`;
      html += `<div class="section-title">Question ${index + 1}</div>`;
      html += `<div class="question">${question.question}</div>`;
      
      if (question.options) {
        html += `<div class="options">`;
        question.options.forEach((option: string, optIndex: number) => {
          const letter = String.fromCharCode(65 + optIndex);
          html += `<div class="option">${letter}. ${option}</div>`;
        });
        html += `</div>`;
      }
      
      html += `<div class="answer"><strong>Answer:</strong> ${question.correctAnswer}</div>`;
      if (question.explanation) {
        html += `<div class="content"><strong>Explanation:</strong> ${question.explanation}</div>`;
      }
      html += `</div>`;
    });
  }

  return html;
} 